name: Build and Release

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: '0.4.10'

jobs:
  build:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv sync
        uv add --dev pyinstaller

    - name: Create img directory and placeholder icon
      run: |
        mkdir -p img
        # Create a simple placeholder icon if none exists
        echo "Creating placeholder icon..."
      shell: bash

    - name: Build executable with PyInstaller
      run: |
        uv run pyinstaller --clean --noconfirm TurboBoostManager.spec
      env:
        PYTHONOPTIMIZE: 1

    - name: Verify build output
      run: |
        if (Test-Path "dist/TurboBoostManager.exe") {
          Write-Output "[SUCCESS] Build successful!"
          $fileSize = (Get-Item "dist/TurboBoostManager.exe").Length
          Write-Output "[INFO] File size: $([math]::Round($fileSize/1MB, 2)) MB"
        } else {
          Write-Output "[ERROR] Build failed - executable not found"
          exit 1
        }
      shell: powershell

    - name: Test executable
      run: |
        # Test that the executable can be launched (will exit quickly due to platform check)
        timeout 10 dist/TurboBoostManager.exe || echo "Executable test completed"
      shell: bash
      continue-on-error: true

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: TurboBoostManager-Windows
        path: |
          dist/TurboBoostManager.exe
          README.md
          LICENSE
        retention-days: 30

    - name: Calculate version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v$(date +'%Y.%m.%d')-${GITHUB_SHA:0:7}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "[INFO] Version: $VERSION"
      shell: bash

    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "Turbo Boost Manager ${{ steps.version.outputs.VERSION }}"
        body: |
          ## Turbo Boost Manager Release

          ### What's New
          - Automated build from commit [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - Built with Python ${{ env.PYTHON_VERSION }}
          - Windows x64 executable included

          ### Download
          - **TurboBoostManager.exe** - Main executable (no installation required)

          ### Usage
          1. Download `TurboBoostManager.exe`
          2. Run as Administrator (required for powercfg operations)
          3. Look for the CPU icon in your system tray
          4. Right-click to configure Turbo Boost settings

          ### System Requirements
          - Windows 10/11 (64-bit)
          - Administrator privileges

          ### Issues
          If you encounter any problems, please [open an issue](https://github.com/${{ github.repository }}/issues).

          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/previous-tag...${{ steps.version.outputs.VERSION }}
        files: |
          dist/TurboBoostManager.exe
          README.md
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
